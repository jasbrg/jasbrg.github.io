<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leet on Jasblog</title>
    <link>https://jasbrg.github.io/categories/leet/</link>
    <description>Recent content in leet on Jasblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Feb 2021 19:14:00 -0600</lastBuildDate>
    
	<atom:link href="https://jasbrg.github.io/categories/leet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add Two Numbers</title>
      <link>https://jasbrg.github.io/leetcode/add-two-numbers/</link>
      <pubDate>Sat, 13 Feb 2021 19:14:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/leetcode/add-two-numbers/</guid>
      <description>Problem You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Solution package main import &amp;quot;fmt&amp;quot; type ListNode struct { Val int Next *ListNode } func listToNumber(l *ListNode) int { var digitPlace = 1 var num = 0 for l !</description>
    </item>
    
    <item>
      <title>Two Snum</title>
      <link>https://jasbrg.github.io/leetcode/two-sum/</link>
      <pubDate>Wed, 10 Feb 2021 12:40:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/leetcode/two-sum/</guid>
      <description>Problem Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Output: Because nums[0] + nums[1] == 9, we return [0, 1]  Solution package main import &amp;quot;fmt&amp;quot; func twoSum(nums []int, target int) []int { var comps = make(map[int]int) // key is the complement, val is assoc index for i := range nums { var comp = target - nums[i]	// what should the complement be?</description>
    </item>
    
  </channel>
</rss>