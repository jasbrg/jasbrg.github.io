<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on Jasblog</title>
    <link>https://jasbrg.github.io/</link>
    <description>Recent content in Index on Jasblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jan 2021 03:15:00 -0600</lastBuildDate><atom:link href="https://jasbrg.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dot Emacs</title>
      <link>https://jasbrg.github.io/init-el/</link>
      <pubDate>Sat, 27 Feb 2021 21:37:53 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/init-el/</guid>
      <description>;;; start of init.el  Prologue  The Tao begot one. One begot two. Two begot three. And three begot the ten thousand things.
&amp;ndash; Tao Te Ching - Lao Tzu - chapter 42
 ;; Focus on the task at hand (setq gc-cons-threshold most-positive-fixnum) ;; Sort the rest out later (add-hook &#39;after-init-hook (lambda () (setq gc-cons-threshold (* 8 1024 1024)))) ;; Leave yourself a way home (defun my/find-init () (interactive) (find-file &amp;quot;~/.</description>
    </item>
    
    <item>
      <title>On: This Is Just To Say</title>
      <link>https://jasbrg.github.io/lit-analysis/this-is-just-to-say/</link>
      <pubDate>Tue, 23 Feb 2021 22:14:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/lit-analysis/this-is-just-to-say/</guid>
      <description>I have eaten
the plums
that were in
the icebox
and which
you were probably
saving
for breakfast
Forgive me
they were delicious
so sweet
and so cold
 William Carlos Williams  A memory of a pleasant day, and remembrance that it is better to ask for forgiveness than it is to ask for permission. Daring is refreshing, when tinted with humility.</description>
    </item>
    
    <item>
      <title>Ough-d</title>
      <link>https://jasbrg.github.io/post/ough-d/</link>
      <pubDate>Thu, 18 Feb 2021 21:20:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/post/ough-d/</guid>
      <description>The tree bough bowed low like dough, dipping slow into the lough
Slough off rough rock, fish roe were fisher&#39;s row tough talk
Though the rivers bend flows in boroughs, scoff not
Sough caught the soft eerie hertz that thrums through thought
Rapids slum tours, enough drought throughout we forgot the
River&#39;s mouth covered for a cough, now frothed in frosted draught</description>
    </item>
    
    <item>
      <title>Curriculum Vitae</title>
      <link>https://jasbrg.github.io/cv/</link>
      <pubDate>Wed, 17 Feb 2021 22:51:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/cv/</guid>
      <description>Work Experience Teaching Assistant  Dates 2019&amp;ndash;2020 Location Amsterdam, NL Employer Vrije Universiteit Responsibilities Facilitate labs and exercise classes, grade code submissions and homework, observe exams Classes  Software Testing Introduction to Programming - Python Advanced Programming Language Concepts Data Structures and Algorithms    Fullstack Developer  Dates 2016&amp;ndash;2017 Location Milwaukee, WI, USA Employer Misix Inc. Responsibilities  Prototype Golang data-visualization interpreter backend Maintain customer auction recommendation preferences list Build Wordpress websites for business clients    Datacenter Assistant  Dates 2014&amp;ndash;2016 Location Milwaukee, WI, USA Employer University of Wisconsin - Milwaukee Responsibilities  Optimize researchers&#39; FORTRAN code Respond to hardware failures Develop Puppet modules Write FreeBSD ports    Alma mater Vrije Universiteit  Dates 2018&amp;ndash;2020 Location Amsterdam, NL Program Master of Computer Science, Foundations of Computing and Concurrency Grade 7.</description>
    </item>
    
    <item>
      <title>Add Two Numbers</title>
      <link>https://jasbrg.github.io/leetcode/add-two-numbers/</link>
      <pubDate>Sat, 13 Feb 2021 19:14:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/leetcode/add-two-numbers/</guid>
      <description>Problem You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Solution package main import &amp;quot;fmt&amp;quot; type ListNode struct { Val int Next *ListNode } func listToNumber(l *ListNode) int { var digitPlace = 1 var num = 0 for l !</description>
    </item>
    
    <item>
      <title>Org-bibliography</title>
      <link>https://jasbrg.github.io/post/org-bib/</link>
      <pubDate>Thu, 11 Feb 2021 20:22:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/post/org-bib/</guid>
      <description>There are a few solutions for tracking bibliographies, the most prominent is Zotero but of course I&amp;rsquo;d like something to integrate into Emacs and Org mode. Luckily this problem has seen some man-hours, there is helm-bibtex and org-ref, and ebib, and pals. The former two are what I&amp;rsquo;ll use, I already use helm (half in preparation for using helm-bibtex) but I do wonder how it works all over. It&amp;rsquo;s already installed so let&amp;rsquo;s see how it works through ox-hugo: turing50:comput.</description>
    </item>
    
    <item>
      <title>Two Sum</title>
      <link>https://jasbrg.github.io/leetcode/two-sum/</link>
      <pubDate>Wed, 10 Feb 2021 12:40:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/leetcode/two-sum/</guid>
      <description>Problem Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Example 1:
Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Output: Because nums[0] + nums[1] == 9, we return [0, 1]  Solution package main import &amp;quot;fmt&amp;quot; func twoSum(nums []int, target int) []int { var comps = make(map[int]int) // key is the complement, val is assoc index for i := range nums { var comp = target - nums[i]	// what should the complement be?</description>
    </item>
    
    <item>
      <title>Gaunt Drift</title>
      <link>https://jasbrg.github.io/post/gaunt-drift/</link>
      <pubDate>Tue, 09 Feb 2021 08:45:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/post/gaunt-drift/</guid>
      <description>The days of winter stretch on long through the year,
fir soaking up the sun shone on the dells
though less now as we approach solstice.
The snow fell heavy last week,
dressing every branch and bough
Hugging the curves of the world, every curve in sight
Now its delicate undriven face falls away with the wind
its gaunt drifts revealing bones of ice</description>
    </item>
    
    <item>
      <title>Longest Collatz sequence</title>
      <link>https://jasbrg.github.io/euler/problem14/</link>
      <pubDate>Sun, 31 Jan 2021 21:19:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem14/</guid>
      <description>The following iterative sequence is defined for the set of positive integers:
n → n/2 ( n is even)
n → 3 n + 1 ( n is odd)
Using the rule above and starting with 13, we generate the following sequence:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.</description>
    </item>
    
    <item>
      <title>Highly divisible triangular number</title>
      <link>https://jasbrg.github.io/euler/problem12/</link>
      <pubDate>Sun, 31 Jan 2021 20:39:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem12/</guid>
      <description>The sequence of triangle numbers is generated by adding the natural numbers. So the 7 ^{th} triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, &amp;hellip;
Let us list the factors of the first seven triangle numbers:
* 1*: 1
* 3*: 1,3</description>
    </item>
    
    <item>
      <title>Large sum</title>
      <link>https://jasbrg.github.io/euler/problem13/</link>
      <pubDate>Sun, 31 Jan 2021 20:13:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem13/</guid>
      <description> Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
 Large numbers are not a problem for Emacs.

defvar problem13data-raw (org-sbe problem13data)) (seq-take (number-to-string (apply &#39;+ (-map &#39;string-to-number (s-split &amp;quot;\n&amp;quot; problem13data-raw)))) 10) &amp;quot;5537376230&amp;quot;  </description>
    </item>
    
    <item>
      <title>Largest product in a grid</title>
      <link>https://jasbrg.github.io/euler/problem11/</link>
      <pubDate>Sun, 31 Jan 2021 19:40:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem11/</guid>
      <description>In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
 
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48   The product of these numbers is 26 × 63 × 78 × 14 = 1788696.</description>
    </item>
    
    <item>
      <title>Summation of primes</title>
      <link>https://jasbrg.github.io/euler/problem10/</link>
      <pubDate>Sun, 31 Jan 2021 17:55:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem10/</guid>
      <description>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.
 This sounds straight forward, I have a prime collector. This will be a test of its efficiency&amp;hellip;
Well, it took almost as long to run as it did to write, but that wasn&amp;rsquo;t too much either. In addition to writing this it was under five minutes including finding and evaluating the required functions from previous exercises.</description>
    </item>
    
    <item>
      <title>Special Pythagorean triplet</title>
      <link>https://jasbrg.github.io/euler/problem9/</link>
      <pubDate>Sun, 31 Jan 2021 17:49:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem9/</guid>
      <description>A Pythagorean triplet is a set of three natural numbers, a &amp;lt; b &amp;lt; c, for which,
a ^{2} + b ^{2} = c ^{2}
For example, 3 ^{2} + 4 ^{2} = 9 + 16 = 25 = 5 ^{2}.
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
 This I&amp;rsquo;m not proud of.. I&amp;rsquo;ll try to refactor it later, but I spent enough time learning about how to generate pythagorean triples.</description>
    </item>
    
    <item>
      <title>Largest product in a series</title>
      <link>https://jasbrg.github.io/euler/problem8/</link>
      <pubDate>Sat, 30 Jan 2021 10:23:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem8/</guid>
      <description>This one contains a chunk of data. This is an opportunity to test out org-babel references. If I put the following data into a named block I should be able to reference it in the code itself without duplicating it. Luckily when I was experimenting with org-babel before in order to write an interface to WolframAlpha I wrote the smallest possible babel interface, just resulting in the contents of src block.</description>
    </item>
    
    <item>
      <title>10001st prime</title>
      <link>https://jasbrg.github.io/euler/problem7/</link>
      <pubDate>Fri, 29 Jan 2021 21:16:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem7/</guid>
      <description> By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?
 This one is also pretty straight-forward, with next-prime we just count up!
(defun nth-prime (n) (cl-loop with prime = 2 for i from 1 below n do (setq prime (next-prime prime)) finally return prime)) (nth-prime 10001) 104743  </description>
    </item>
    
    <item>
      <title>Sum square difference</title>
      <link>https://jasbrg.github.io/euler/problem6/</link>
      <pubDate>Fri, 29 Jan 2021 21:08:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem6/</guid>
      <description>The sum of the squares of the first ten natural numbers is,
1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)^2 = 55^2 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.</description>
    </item>
    
    <item>
      <title>Smallest multiple</title>
      <link>https://jasbrg.github.io/euler/problem5/</link>
      <pubDate>Fri, 29 Jan 2021 20:27:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem5/</guid>
      <description>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 There&amp;rsquo;s more plumbing in the form of an abstract data-type which uses a modification of Largest prime factor to find all primes of a given numbers factors. Using this information we can construct a multiset,1 here the key is a prime, and the value is its power.</description>
    </item>
    
    <item>
      <title>Largest palindrome product</title>
      <link>https://jasbrg.github.io/euler/problem4/</link>
      <pubDate>Fri, 29 Jan 2021 12:10:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem4/</guid>
      <description>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
 Loops are powerful. The Loop Macro is a very good DSL.
;;; This is trivial (defun palindrome-intp (n) (let ((s (int-to-string n))) (string-equal s (string-reverse s)))) ;;; The best way to search the problem space isn&#39;t obvious to me.</description>
    </item>
    
    <item>
      <title>Largest prime factor</title>
      <link>https://jasbrg.github.io/euler/problem3/</link>
      <pubDate>Fri, 29 Jan 2021 10:31:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem3/</guid>
      <description>The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
 I quickly realized a limitation of Elisp is its hacky early return from functions being based around catch and throw. It is idiomatic, but it sounds kind of ugly. We&amp;rsquo;re saved by the Loop Facility though, letting us write iterative programs, yay. It&amp;rsquo;s stateful, but whatever, the approach is sound.</description>
    </item>
    
    <item>
      <title>Even Fibonacci numbers</title>
      <link>https://jasbrg.github.io/euler/problem2/</link>
      <pubDate>Fri, 29 Jan 2021 09:47:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem2/</guid>
      <description>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, &amp;hellip;
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 This one is still straight-forward, I&amp;rsquo;m thankful for the parallel assignment macro from cl, saves from requiring a temporary variable reducing the complexity of the code.</description>
    </item>
    
    <item>
      <title>Multiples of 3 and 5</title>
      <link>https://jasbrg.github.io/euler/problem1/</link>
      <pubDate>Fri, 29 Jan 2021 08:13:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/euler/problem1/</guid>
      <description>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
 The first 100 problems of Project Euler are free for publishing, solutions can be freely discussed without offending the project runners.1 The first solution is little more than a reimplementation of the problem description in your chosen language.</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>https://jasbrg.github.io/post/hello/</link>
      <pubDate>Thu, 28 Jan 2021 15:56:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/post/hello/</guid>
      <description>Coming to you from nearly-nine-hundred lines of Emacs-lisp and a pittance of CSS. Do you really need more? 1 In time I&amp;rsquo;ll accumulate more bits and pieces of customization and configuration to apply, better expressing myself through this site. As it stands now this little veneer suffices, it&amp;rsquo;s never really about what&amp;rsquo;s on the cover anyway, but how effective the cover is at appealing to those that may appreciate the content.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://jasbrg.github.io/about/</link>
      <pubDate>Thu, 28 Jan 2021 14:52:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/about/</guid>
      <description>Hello Reader,
The name&amp;rsquo;s Jacob. Before the catastrophe I studied theoretical computer science at the Vrije Universiteit van Amsterdam, and got a bachelor&amp;rsquo;s in computer science at the University of Wisconsin - Milwaukee before that.
In technology I like Emacs, Linux, programming language theory, and interfaces. Other intellectual interests are philosophy, logic, and when I&amp;rsquo;m feeling bold, theology.
I appreciate poetry, symbolic art, and folk music. The ideal piece in my opinion is challenging, inviting interpretation.</description>
    </item>
    
    <item>
      <title>Org-Spreadsheet</title>
      <link>https://jasbrg.github.io/post/org-spreadsheet/</link>
      <pubDate>Fri, 15 Jan 2021 18:53:00 -0600</pubDate>
      
      <guid>https://jasbrg.github.io/post/org-spreadsheet/</guid>
      <description>Intro This is getting pretty interesting. The spreadsheet functionality of org-tables is more impressive than I would have guessed. For small example here&amp;rsquo;s a snapshot of a diet.org file I&amp;rsquo;ve been working on.
* Food Lookup Table #+TBLNAME: nutrition | name | cal/g | fat%g | carb%g | prot%g | |----------------+-------+-------+--------+--------| | corn beef hash | 1.64 | 10 | 10 | 7 |  * Food Log #+TBLNAME: diet | timestamp | name | grams | cal/g | calories | |------------------------+----------------+-------+-------+----------| | [2021-01-15 Fri 13:35] | corn beef hash | 198 | 1.</description>
    </item>
    
  </channel>
</rss>
